---
import typerList from "@data/typer.json";
import "@assets/styles/typer.scss";
import jacobSvg from "@assets/images/jacob.svg";
import readSvg from "@assets/images/read.svg";

// Create a comma seperate list of the values to type
const typerValues: string = typerList.join(",");
---

<div class="heading">
    <div class="heading__content">
        <h1 class="heading__name">
            <img
                class="heading__name__first"
                src={jacobSvg.src}
                width="450px"
                height="100px"
                alt="Jacob"
                aria-hidden="true"
            />
            <img
                class="heading__name__last"
                src={readSvg.src}
                width="340px"
                height="90px"
                alt="Read"
                aria-hidden="true"
            />
            <span class="sr-only">Jacob Read</span>
        </h1>
        <p class="heading__role">
            <!-- Typing element with its possible values -->
            <span class="typer" data-values={typerValues}>
                {typerList[0]}
            </span>

            Developer
        </p>
        <nav class="nav">
            <a href="/blog" class="nav__link">Blog</a>
            <a href="#contact" class="nav__link">Contact</a>
            <a href="#about" class="nav__link">About</a>
            <a href="#technology" class="nav__link">Technology</a>
            <a href="/projects" class="nav__link">Projects</a>
        </nav>
    </div>
</div>

<script src="../scripts/typer.ts"></script>

<style lang="scss">
    @use "@assets/styles/scheme.scss" as scheme;

    .typer {
        color: var(--primary-lighter);
        position: relative;
        margin-right: 4px;
    }

    .heading {
        height: 100vh;
        width: 100%;

        background:
            linear-gradient(rgba(12, 12, 12, 0.5), rgba(17, 17, 17, 0.5)),
            url("/background.jpg") no-repeat;
        background-size: cover;

        display: flex;
        align-items: center;
        border-bottom: 1px solid var(--border-color);
    }

    .heading__content {
        margin: 0 auto;
        width: 100%;
        max-width: 86rem;
        padding: 0 5rem;
    }

    .heading__name {
        display: flex;
        flex-flow: column;
        gap: 2rem;

        font-weight: bold;
        font-size: 8rem;
        color: var(--title);
        margin-left: -4px;
    }

    .heading__name__first,
    .heading__name__last {
        opacity: 0;
        animation: in-left 0.5s ease forwards;
    }

    .heading__name__last {
        animation-delay: 0.1s;
    }

    .heading__role {
        margin-top: 1rem;
        font-size: 2rem;
        font-weight: bold;
        animation: in-left 0.5s 0.2s ease forwards;
        opacity: 0;
    }

    .nav {
        display: flex;
        flex-flow: row wrap;
        gap: 1rem;
        margin-top: 1rem;
    }

    // The delay increase for each button
    $nav-delay-inc: 0.15s;
    // The total number of buttons
    $nav-button-count: 5;
    // The total animation delay for all the buttons
    $nav-total-delay: $nav-delay-inc * $nav-button-count;

    .nav__link {
        font-weight: bold;
        color: var(--text);
        font-size: 1.25rem;
        text-decoration: none;
        padding: 1rem;
        border: 2px solid #222b22;
        text-transform: uppercase;
        border-radius: 0.25rem;

        background-color: transparent;
        opacity: 0;

        transition:
            color 0.5s,
            border-color 0.25s,
            background-color 0.5s;

        animation: link-in-left 0.5s $nav-total-delay ease forwards;

        // Delayed animations for each of the buttons
        $delay: $nav-total-delay;
        @for $i from 1 to ($nav-button-count + 1) {
            &:nth-child(#{$i}) {
                animation-delay: $delay;
            }

            $delay: $delay - $nav-delay-inc;
        }

        &:hover {
            color: #ffffff;
            border-color: var(--primary);
            background-color: var(--primary-darker);
        }
    }

    @keyframes link-in-left {
        0% {
            opacity: 0;
            transform: translateX(-100%);
        }
        100% {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @media screen and (max-width: scheme.$screen-tablet) {
        .heading {
            text-align: center;

            &__name {
                align-items: center;
                gap: 1.5rem;
            }

            &__role {
                font-size: 2rem;
            }
        }

        .heading__name__first {
            width: 350px;
            height: 80px;
        }

        .heading__name__last {
            width: 240px;
            height: 70px;
        }

        .nav {
            text-align: center;
            justify-content: center;
        }
    }

    @media screen and (max-width: scheme.$screen-small) {
        .heading {
            &__content {
                padding: 0 3rem;
            }

            &__name {
                gap: 0.25rem;
            }

            &__role {
                font-size: 1.25rem;
            }
        }

        .heading__name__first {
            width: 300px;
            height: 70px;
        }

        .heading__name__last {
            width: 190px;
            height: 60px;
        }

        .nav {
            flex-flow: column nowrap;
            width: 100%;

            &__link {
                display: block;
                width: 100%;
            }
        }
    }

    @media screen and (max-width: scheme.$screen-extra-small) {
        .heading__name__first {
            width: 200px;
        }
        .heading__name__last {
            width: 140px;
            height: 40px;
        }

        .heading__name {
            font-size: 3rem;
        }
    }
</style>
