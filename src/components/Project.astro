---
import type { CollectionEntry } from "astro:content";
import GitHub from "./icons/GitHub.astro";

type Project = CollectionEntry<"projects">;
type Props = Project;

const { data, render } = Astro.props;

type ProjectLinkType = "GITHUB" | "WEBSITE";

const DEFAULT_NAMES: Record<ProjectLinkType, string> = {
    GITHUB: "Github",
    WEBSITE: "View Website",
};

type ProjectLink = {
    type: ProjectLinkType;
    link: string;
    name?: string;
};

const { title, tags, links, image, span } = data;
const { Content } = await render();
---

<li class={span ? "block block--span project" : "block project"}>
    <div>
        {
            image && (
                <img
                    src={image}
                    alt={title}
                    loading="lazy"
                    decoding="async"
                    class="icon"
                />
            )
        }

        <h2 class="project__title">{title}</h2>
        <Content />
    </div>

    <div>
        <ul class="block__row project__tags">
            {tags.map((tag: string) => <li class="project__tag"># {tag}</li>)}
        </ul>
        <ul class="block__row">
            {
                links &&
                    links.map((link: ProjectLink) => {
                        const name = link.name ?? DEFAULT_NAMES[link.type];
                        return (
                            <li>
                                <a
                                    class="block__button"
                                    target="_blank"
                                    rel="noreferrer noopener"
                                    href={link.link}>
                                    {link.type === "GITHUB" && (
                                        <GitHub class="inline-icon" />
                                    )}
                                    {name}
                                </a>
                            </li>
                        );
                    })
            }
        </ul>
    </div>
</li>

<style lang="scss">
    .icon {
        max-height: 32px;
        height: 100%;
        width: auto;
        margin-bottom: 1rem;
    }

    .project {
        display: flex;
        flex-flow: column;

        justify-content: space-between;
        align-content: space-between;
        gap: 1rem;

        &__tags {
            gap: 1rem;
        }

        &__tag {
            transition: background-color 0.25s ease;
            font-size: 0.8rem;
            color: var(--text-dark);
            background: var(--btn-surface-bg-color);
            padding: 0.5rem 0.75rem;
            border-radius: 5px;
        }

        &:hover {
            .project__tag {
                background-color: #3c3c3c;
            }
        }

        :global(p) {
            margin: 1rem 0;
            font-size: 1.15rem;
            color: var(--text);
        }
    }

    @media screen and (max-width: 48rem) {
        .project :global(p) {
            font-size: 1rem;
        }
    }
</style>
